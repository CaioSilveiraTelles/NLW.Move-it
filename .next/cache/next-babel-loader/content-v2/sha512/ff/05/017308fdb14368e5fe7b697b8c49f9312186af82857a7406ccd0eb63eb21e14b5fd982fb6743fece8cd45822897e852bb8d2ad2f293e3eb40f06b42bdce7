{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\caio.telles\\\\move.it\\\\src\\\\contexts\\\\ChallengesContext.tsx\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { createContext, useEffect, useState } from 'react';\nimport LevelUpModal from '../components/LevelUpModal';\nimport Cookies from 'js-cookie';\nimport challenges from '../../challenges.json';\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  var _rest$level, _rest$currentExperien, _rest$challengesCompl;\n\n  let {\n    children\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"children\"]);\n\n  const {\n    0: level,\n    1: setLevel\n  } = useState((_rest$level = rest.level) !== null && _rest$level !== void 0 ? _rest$level : 1);\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState((_rest$currentExperien = rest.currentExperience) !== null && _rest$currentExperien !== void 0 ? _rest$currentExperien : 0);\n  const {\n    0: challengesCompleted,\n    1: setChallengesCompleted\n  } = useState((_rest$challengesCompl = rest.challengesCompleted) !== null && _rest$challengesCompl !== void 0 ? _rest$challengesCompl : 0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n  const {\n    0: isLevelUpModalOpen,\n    1: setIsLevelUpModalOpen\n  } = useState(false);\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n  useEffect(() => {\n    Notification.requestPermission();\n  }, []);\n  useEffect(() => {\n    Cookies.set('level', String(level));\n    Cookies.set('currentExperience', String(currentExperience));\n    Cookies.set('challengesCompleted', String(challengesCompleted));\n  }, [level, currentExperience, challengesCompleted]);\n\n  function levelUp() {\n    setLevel(level + 1);\n    setIsLevelUpModalOpen(true);\n  }\n\n  function closeLevelUpModal() {\n    setIsLevelUpModalOpen(false);\n  }\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n    new Audio('/notification.mp3').play();\n\n    if (Notification.permission === 'granted') {\n      new Notification('ðŸŽ‰ Novo Desafio', {\n        body: `Valendo ${challenge.amount}.`\n      });\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) return;\n    const {\n      amount\n    } = activeChallenge;\n    let finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level,\n      currentExperience,\n      challengesCompleted,\n      activeChallenge,\n      experienceToNextLevel,\n      levelUp,\n      startNewChallenge,\n      resetChallenge,\n      completeChallenge,\n      closeLevelUpModal\n    },\n    children: [children, isLevelUpModalOpen && /*#__PURE__*/_jsxDEV(LevelUpModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/caio.telles/move.it/src/contexts/ChallengesContext.tsx"],"names":["createContext","useEffect","useState","LevelUpModal","Cookies","challenges","ChallengesContext","ChallengesProvider","children","rest","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","isLevelUpModalOpen","setIsLevelUpModalOpen","experienceToNextLevel","Math","pow","Notification","requestPermission","set","String","levelUp","closeLevelUpModal","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","Audio","play","permission","body","amount","resetChallenge","completeChallenge","finalExperience"],"mappings":"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","sourcesContent":["import { createContext, ReactNode, useEffect, useState } from 'react'\r\nimport LevelUpModal from '../components/LevelUpModal'\r\nimport Cookies from 'js-cookie'\r\nimport challenges from '../../challenges.json'\r\n\r\ninterface Challenge {\r\n  type: string\r\n  description: string\r\n  amount: number\r\n}\r\n\r\ninterface ChallengesContextData {\r\n  level: number\r\n  currentExperience: number\r\n  challengesCompleted: number\r\n  activeChallenge: Challenge | null\r\n  experienceToNextLevel: number\r\n  levelUp: () => void\r\n  startNewChallenge: () => void\r\n  resetChallenge: () => void\r\n  completeChallenge: () => void\r\n  closeLevelUpModal: () => void\r\n}\r\n\r\ninterface ChallengesProviderProps {\r\n  children: ReactNode\r\n  level: number\r\n  currentExperience: number\r\n  challengesCompleted: number\r\n}\r\n\r\nexport const ChallengesContext = createContext({} as ChallengesContextData)\r\n\r\nexport function ChallengesProvider({\r\n  children,\r\n  ...rest\r\n}: ChallengesProviderProps): React.ReactElement {\r\n  const [level, setLevel] = useState(rest.level ?? 1)\r\n  const [currentExperience, setCurrentExperience] = useState(\r\n    rest.currentExperience ?? 0\r\n  )\r\n  const [challengesCompleted, setChallengesCompleted] = useState(\r\n    rest.challengesCompleted ?? 0\r\n  )\r\n\r\n  const [activeChallenge, setActiveChallenge] = useState<Challenge | null>(null)\r\n  const [isLevelUpModalOpen, setIsLevelUpModalOpen] = useState(false)\r\n\r\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2)\r\n\r\n  useEffect(() => {\r\n    Notification.requestPermission()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    Cookies.set('level', String(level))\r\n    Cookies.set('currentExperience', String(currentExperience))\r\n    Cookies.set('challengesCompleted', String(challengesCompleted))\r\n  }, [level, currentExperience, challengesCompleted])\r\n\r\n  function levelUp() {\r\n    setLevel(level + 1)\r\n    setIsLevelUpModalOpen(true)\r\n  }\r\n\r\n  function closeLevelUpModal() {\r\n    setIsLevelUpModalOpen(false)\r\n  }\r\n\r\n  function startNewChallenge() {\r\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length)\r\n    const challenge = challenges[randomChallengeIndex]\r\n\r\n    setActiveChallenge(challenge)\r\n\r\n    new Audio('/notification.mp3').play()\r\n\r\n    if (Notification.permission === 'granted') {\r\n      new Notification('ðŸŽ‰ Novo Desafio', {\r\n        body: `Valendo ${challenge.amount}.`\r\n      })\r\n    }\r\n  }\r\n\r\n  function resetChallenge() {\r\n    setActiveChallenge(null)\r\n  }\r\n\r\n  function completeChallenge() {\r\n    if (!activeChallenge) return\r\n\r\n    const { amount } = activeChallenge\r\n\r\n    let finalExperience = currentExperience + amount\r\n\r\n    if (finalExperience >= experienceToNextLevel) {\r\n      finalExperience = finalExperience - experienceToNextLevel\r\n      levelUp()\r\n    }\r\n\r\n    setCurrentExperience(finalExperience)\r\n    setActiveChallenge(null)\r\n    setChallengesCompleted(challengesCompleted + 1)\r\n  }\r\n\r\n  return (\r\n    <ChallengesContext.Provider\r\n      value={{\r\n        level,\r\n        currentExperience,\r\n        challengesCompleted,\r\n        activeChallenge,\r\n        experienceToNextLevel,\r\n        levelUp,\r\n        startNewChallenge,\r\n        resetChallenge,\r\n        completeChallenge,\r\n        closeLevelUpModal\r\n      }}\r\n    >\r\n      {children}\r\n\r\n      {isLevelUpModalOpen && <LevelUpModal />}\r\n    </ChallengesContext.Provider>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}