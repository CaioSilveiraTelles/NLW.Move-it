{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\caio.telles\\\\NLW.Move-it\\\\src\\\\contexts\\\\CountdownContext.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { ChallengesContext } from './ChallengesContext';\nexport var CountdownContext = /*#__PURE__*/createContext({});\nvar countdownTimeout;\nexport function CountdownProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useContext = useContext(ChallengesContext),\n      startNewChallenge = _useContext.startNewChallenge;\n\n  var _useState = useState(0.1 * 30),\n      time = _useState[0],\n      setTime = _useState[1];\n\n  var _useState2 = useState(false),\n      isActive = _useState2[0],\n      setIsActive = _useState2[1];\n\n  var _useState3 = useState(false),\n      hasFinished = _useState3[0],\n      setHasFinished = _useState3[1];\n\n  var minutes = Math.floor(time / 60);\n  var seconds = time % 60;\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setHasFinished(false);\n    setTime(0.1 * 30);\n  }\n\n  useEffect(function () {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(function () {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time === 0) {\n      setHasFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minutes: minutes,\n      seconds: seconds,\n      hasFinished: hasFinished,\n      isActive: isActive,\n      startCountdown: startCountdown,\n      resetCountdown: resetCountdown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CountdownProvider, \"qh+WtLqm/Not4PK0Trdjc5KmSJY=\");\n\n_c = CountdownProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountdownProvider\");","map":{"version":3,"sources":["C:/Users/caio.telles/NLW.Move-it/src/contexts/CountdownContext.tsx"],"names":["React","createContext","useContext","useEffect","useState","ChallengesContext","CountdownContext","countdownTimeout","CountdownProvider","children","startNewChallenge","time","setTime","isActive","setIsActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","startCountdown","resetCountdown","clearTimeout","setTimeout"],"mappings":";;;;;AAAA,OAAOA,KAAP,IACEC,aADF,EAGEC,UAHF,EAIEC,SAJF,EAKEC,QALF,QAMO,OANP;AAOA,SAASC,iBAAT,QAAkC,qBAAlC;AAeA,OAAO,IAAMC,gBAAgB,gBAAGL,aAAa,CAAC,EAAD,CAAtC;AAEP,IAAIM,gBAAJ;AAEA,OAAO,SAASC,iBAAT,OAEwC;AAAA;;AAAA,MAD7CC,QAC6C,QAD7CA,QAC6C;;AAAA,oBACfP,UAAU,CAACG,iBAAD,CADK;AAAA,MACrCK,iBADqC,eACrCA,iBADqC;;AAAA,kBAGrBN,QAAQ,CAAC,MAAM,EAAP,CAHa;AAAA,MAGtCO,IAHsC;AAAA,MAGhCC,OAHgC;;AAAA,mBAIbR,QAAQ,CAAC,KAAD,CAJK;AAAA,MAItCS,QAJsC;AAAA,MAI5BC,WAJ4B;;AAAA,mBAKPV,QAAQ,CAAC,KAAD,CALD;AAAA,MAKtCW,WALsC;AAAA,MAKzBC,cALyB;;AAO7C,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAG,EAAlB,CAAhB;AACA,MAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB;;AAEA,WAASU,cAAT,GAA0B;AACxBP,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AAED,WAASQ,cAAT,GAA0B;AACxBC,IAAAA,YAAY,CAAChB,gBAAD,CAAZ;AACAO,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAE,IAAAA,cAAc,CAAC,KAAD,CAAd;AACAJ,IAAAA,OAAO,CAAC,MAAM,EAAP,CAAP;AACD;;AAEDT,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIU,QAAQ,IAAIF,IAAI,GAAG,CAAvB,EAA0B;AACxBJ,MAAAA,gBAAgB,GAAGiB,UAAU,CAAC,YAAM;AAClCZ,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACD,OAF4B,EAE1B,IAF0B,CAA7B;AAGD,KAJD,MAIO,IAAIE,QAAQ,IAAIF,IAAI,KAAK,CAAzB,EAA4B;AACjCK,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAJ,MAAAA,iBAAiB;AAClB;AACF,GAVQ,EAUN,CAACG,QAAD,EAAWF,IAAX,CAVM,CAAT;AAYA,sBACE,QAAC,gBAAD,CAAkB,QAAlB;AACE,IAAA,KAAK,EAAE;AACLM,MAAAA,OAAO,EAAPA,OADK;AAELG,MAAAA,OAAO,EAAPA,OAFK;AAGLL,MAAAA,WAAW,EAAXA,WAHK;AAILF,MAAAA,QAAQ,EAARA,QAJK;AAKLQ,MAAAA,cAAc,EAAdA,cALK;AAMLC,MAAAA,cAAc,EAAdA;AANK,KADT;AAAA,cAUGb;AAVH;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;;GAjDeD,iB;;KAAAA,iB","sourcesContent":["import React, {\r\n  createContext,\r\n  ReactNode,\r\n  useContext,\r\n  useEffect,\r\n  useState\r\n} from 'react'\r\nimport { ChallengesContext } from './ChallengesContext'\r\n\r\ninterface CountdownContextData {\r\n  minutes: number\r\n  seconds: number\r\n  hasFinished: boolean\r\n  isActive: boolean\r\n  startCountdown: () => void\r\n  resetCountdown: () => void\r\n}\r\n\r\ninterface CountdownProviderProps {\r\n  children: ReactNode\r\n}\r\n\r\nexport const CountdownContext = createContext({} as CountdownContextData)\r\n\r\nlet countdownTimeout: NodeJS.Timeout\r\n\r\nexport function CountdownProvider({\r\n  children\r\n}: CountdownProviderProps): React.ReactElement {\r\n  const { startNewChallenge } = useContext(ChallengesContext)\r\n\r\n  const [time, setTime] = useState(0.1 * 30)\r\n  const [isActive, setIsActive] = useState(false)\r\n  const [hasFinished, setHasFinished] = useState(false)\r\n\r\n  const minutes = Math.floor(time / 60)\r\n  const seconds = time % 60\r\n\r\n  function startCountdown() {\r\n    setIsActive(true)\r\n  }\r\n\r\n  function resetCountdown() {\r\n    clearTimeout(countdownTimeout)\r\n    setIsActive(false)\r\n    setHasFinished(false)\r\n    setTime(0.1 * 30)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isActive && time > 0) {\r\n      countdownTimeout = setTimeout(() => {\r\n        setTime(time - 1)\r\n      }, 1000)\r\n    } else if (isActive && time === 0) {\r\n      setHasFinished(true)\r\n      setIsActive(false)\r\n      startNewChallenge()\r\n    }\r\n  }, [isActive, time])\r\n\r\n  return (\r\n    <CountdownContext.Provider\r\n      value={{\r\n        minutes,\r\n        seconds,\r\n        hasFinished,\r\n        isActive,\r\n        startCountdown,\r\n        resetCountdown\r\n      }}\r\n    >\r\n      {children}\r\n    </CountdownContext.Provider>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}