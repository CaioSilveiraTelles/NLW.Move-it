{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\caio.telles\\\\move-it\\\\src\\\\contexts\\\\ChallengesContext.tsx\";\nimport { createContext, useState } from \"react\";\nimport challenges from \"../../challenges.json\";\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider({\n  children\n}) {\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1);\n  const {\n    0: experience,\n    1: setExperience\n  } = useState(10);\n  const {\n    0: completedChallenges,\n    1: setCompletedChallenges\n  } = useState(0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const newChallenge = challenges[randomChallengeIndex];\n    setActiveChallenge(newChallenge);\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function challengComplet() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    const {\n      amount\n    } = activeChallenge;\n    let finalExperience = experience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setExperience(finalExperience);\n    setActiveChallenge(null);\n    setCompletedChallenges(completedChallenges + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level,\n      experience,\n      experienceToNextLevel,\n      completedChallenges,\n      activeChallenge,\n      functions: {\n        levelUp,\n        startNewChallenge,\n        resetChallenge,\n        challengComplet\n      }\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/caio.telles/move-it/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","experience","setExperience","completedChallenges","setCompletedChallenges","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","levelUp","startNewChallenge","randomChallengeIndex","floor","random","length","newChallenge","resetChallenge","challengComplet","amount","finalExperience","functions"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAmD,OAAnD;AAEA,OAAOC,UAAP,MAAuB,uBAAvB;AAwBA,OAAO,MAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASI,kBAAT,CAA4B;AAAEC,EAAAA;AAAF,CAA5B,EAAmE;AACxE,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBN,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM;AAAA,OAACO,UAAD;AAAA,OAAaC;AAAb,MAA8BR,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM;AAAA,OAACS,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDV,QAAQ,CAAC,CAAD,CAA9D;AACA,QAAM;AAAA,OAACW,eAAD;AAAA,OAAkBC;AAAlB,MAAwCZ,QAAQ,CAAC,IAAD,CAAtD;AAEA,QAAMa,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAG,CAAT,IAAc,CAAvB,EAA0B,CAA1B,CAA9B;;AAEA,WAASW,OAAT,GAAmB;AACjBV,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;;AAED,WAASY,iBAAT,GAA6B;AAC3B,UAAMC,oBAAoB,GAAGJ,IAAI,CAACK,KAAL,CAAWL,IAAI,CAACM,MAAL,KAAgBnB,UAAU,CAACoB,MAAtC,CAA7B;AACA,UAAMC,YAAY,GAAGrB,UAAU,CAACiB,oBAAD,CAA/B;AACAN,IAAAA,kBAAkB,CAACU,YAAD,CAAlB;AACD;;AAED,WAASC,cAAT,GAA0B;AACxBX,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD;;AAED,WAASY,eAAT,GAA0B;AACtB,QAAI,CAACb,eAAL,EAAqB;AACnB;AACD;;AAED,UAAM;AAACc,MAAAA;AAAD,QAAWd,eAAjB;AAEA,QAAIe,eAAe,GAAGnB,UAAU,GAAGkB,MAAnC;;AAEA,QAAIC,eAAe,IAAIb,qBAAvB,EAA6C;AACzCa,MAAAA,eAAe,GAAGA,eAAe,GAAGb,qBAApC;AACAG,MAAAA,OAAO;AACV;;AAEDR,IAAAA,aAAa,CAACkB,eAAD,CAAb;AACAd,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAF,IAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACH;;AAED,sBACE,QAAC,iBAAD,CAAmB,QAAnB;AACE,IAAA,KAAK,EAAE;AACHJ,MAAAA,KADG;AAEHE,MAAAA,UAFG;AAGHM,MAAAA,qBAHG;AAIHJ,MAAAA,mBAJG;AAKHE,MAAAA,eALG;AAOLgB,MAAAA,SAAS,EAAE;AACTX,QAAAA,OADS;AAETC,QAAAA,iBAFS;AAGTM,QAAAA,cAHS;AAITC,QAAAA;AAJS;AAPN,KADT;AAAA,cAgBGpB;AAhBH;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD","sourcesContent":["import { createContext, useState, ReactNode } from \"react\";\r\n\r\nimport challenges from \"../../challenges.json\";\r\n\r\ninterface ChallengesProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\ninterface ChallengesContextData {\r\n    level: number;\r\n    experience: number;\r\n    experienceToNextLevel: number;\r\n    completedChallenges: number;\r\n    activeChallenge: {\r\n      type: \"body\" | \"eye\";\r\n      description: string;\r\n      amount: number;\r\n  };\r\n  functions: {\r\n    levelUp: () => void;\r\n    startNewChallenge: () => void;\r\n    resetChallenge: () => void;\r\n    challengComplet: () => void;\r\n  };\r\n}\r\n\r\nexport const ChallengesContext = createContext({} as ChallengesContextData);\r\n\r\nexport function ChallengesProvider({ children }: ChallengesProviderProps) {\r\n  const [level, setLevel] = useState(1);\r\n  const [experience, setExperience] = useState(10);\r\n  const [completedChallenges, setCompletedChallenges] = useState(0);\r\n  const [activeChallenge, setActiveChallenge] = useState(null);\r\n\r\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\r\n\r\n  function levelUp() {\r\n    setLevel(level + 1);\r\n  }\r\n\r\n  function startNewChallenge() {\r\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\r\n    const newChallenge = challenges[randomChallengeIndex];\r\n    setActiveChallenge(newChallenge);\r\n  }\r\n\r\n  function resetChallenge() {\r\n    setActiveChallenge(null);\r\n  }\r\n\r\n  function challengComplet(){\r\n      if (!activeChallenge){\r\n        return;\r\n      }\r\n\r\n      const {amount} = activeChallenge\r\n\r\n      let finalExperience = experience + amount ;\r\n\r\n      if (finalExperience >= experienceToNextLevel){\r\n          finalExperience = finalExperience - experienceToNextLevel ;\r\n          levelUp();\r\n      } \r\n\r\n      setExperience(finalExperience);\r\n      setActiveChallenge(null);\r\n      setCompletedChallenges(completedChallenges + 1);\r\n  }\r\n\r\n  return (\r\n    <ChallengesContext.Provider\r\n      value={{\r\n          level,\r\n          experience,\r\n          experienceToNextLevel,\r\n          completedChallenges,\r\n          activeChallenge,\r\n \r\n        functions: {\r\n          levelUp,\r\n          startNewChallenge,\r\n          resetChallenge,\r\n          challengComplet,\r\n        },\r\n      }}\r\n    >\r\n      {children}\r\n    </ChallengesContext.Provider>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}