{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\caio.telles\\\\NLW.Move-it\\\\src\\\\contexts\\\\CountDownContext.tsx\";\nimport { createContext, useState, useContext, useEffect } from \"react\";\nimport { ChallengesContext } from \"./ChallengesContext\";\nexport const CountDownContext = /*#__PURE__*/createContext({});\nexport function CountDownProvider({\n  children\n}) {\n  let countdownTimeout;\n  const {\n    functions\n  } = useContext(ChallengesContext);\n  const {\n    startNewChallenge\n  } = functions;\n  const {\n    0: timer,\n    1: setTimer\n  } = useState(0.1 * 60);\n  const {\n    0: isActive,\n    1: setIsActive\n  } = useState(false);\n  const {\n    0: hasFinished,\n    1: setHasFinished\n  } = useState(false);\n  const minute = Math.floor(timer / 60);\n  const second = timer % 60;\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setHasFinished(false);\n    setTimer(0.1 * 60);\n  }\n\n  useEffect(() => {\n    if (isActive && timer > 0) {\n      countdownTimeout = setTimeout(() => {\n        setTimer(timer - 1);\n      }, 1000);\n    } else if (isActive && timer === 0) {\n      setHasFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, timer]);\n  return /*#__PURE__*/_jsxDEV(CountDownContext.Provider, {\n    value: {\n      minute,\n      second,\n      hasFinished,\n      isActive,\n      startCountdown,\n      resetCountdown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/caio.telles/NLW.Move-it/src/contexts/CountDownContext.tsx"],"names":["createContext","useState","useContext","useEffect","ChallengesContext","CountDownContext","CountDownProvider","children","countdownTimeout","functions","startNewChallenge","timer","setTimer","isActive","setIsActive","hasFinished","setHasFinished","minute","Math","floor","second","startCountdown","resetCountdown","clearTimeout","setTimeout"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAA6CC,UAA7C,EAAyDC,SAAzD,QAA0E,OAA1E;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAkBA,OAAO,MAAMC,gBAAgB,gBAAGL,aAAa,CAAC,EAAD,CAAtC;AAEP,OAAO,SAASM,iBAAT,CAA2B;AAACC,EAAAA;AAAD,CAA3B,EAA8D;AAEjE,MAAIC,gBAAJ;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAAgBP,UAAU,CAACE,iBAAD,CAAhC;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAwBD,SAA9B;AAEA,QAAM;AAAA,OAACE,KAAD;AAAA,OAAQC;AAAR,MAAoBX,QAAQ,CAAC,MAAM,EAAP,CAAlC;AACA,QAAM;AAAA,OAACY,QAAD;AAAA,OAAWC;AAAX,MAA0Bb,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAA,OAACc,WAAD;AAAA,OAAcC;AAAd,MAAgCf,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAMgB,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWR,KAAK,GAAG,EAAnB,CAAf;AACA,QAAMS,MAAM,GAAGT,KAAK,GAAG,EAAvB;;AAEA,WAASU,cAAT,GAA0B;AACtBP,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AAED,WAASQ,cAAT,GAA0B;AACxBC,IAAAA,YAAY,CAACf,gBAAD,CAAZ;AACAM,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAE,IAAAA,cAAc,CAAC,KAAD,CAAd;AACAJ,IAAAA,QAAQ,CAAC,MAAM,EAAP,CAAR;AACD;;AAEDT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,QAAQ,IAAIF,KAAK,GAAG,CAAxB,EAA2B;AACzBH,MAAAA,gBAAgB,GAAGgB,UAAU,CAAC,MAAM;AAClCZ,QAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD,OAF4B,EAE1B,IAF0B,CAA7B;AAGD,KAJD,MAIO,IAAIE,QAAQ,IAAIF,KAAK,KAAK,CAA1B,EAA6B;AAClCK,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAJ,MAAAA,iBAAiB;AAClB;AACF,GAVQ,EAUN,CAACG,QAAD,EAAWF,KAAX,CAVM,CAAT;AAcF,sBAEI,QAAC,gBAAD,CAAkB,QAAlB;AACA,IAAA,KAAK,EAAE;AACHM,MAAAA,MADG;AAEHG,MAAAA,MAFG;AAGHL,MAAAA,WAHG;AAIHF,MAAAA,QAJG;AAKHQ,MAAAA,cALG;AAMHC,MAAAA;AANG,KADP;AAAA,cAUKf;AAVL;AAAA;AAAA;AAAA;AAAA,UAFJ;AAeH","sourcesContent":["import { createContext, useState, ReactNode, useContext, useEffect } from \"react\";\r\nimport { ChallengesContext } from \"./ChallengesContext\";\r\n\r\n\r\ninterface CountDownContextProps {\r\n    children: ReactNode;\r\n  }\r\n\r\ninterface CountDownContextData{\r\n\r\n    minute      : number   ;\r\n    second      : number   ;\r\n    hasFinished : boolean  ;\r\n    isActive    : boolean  ;\r\n    startCountdown: () => void;\r\n    resetCountdown: () => void;\r\n\r\n}\r\n\r\nexport const CountDownContext = createContext({} as CountDownContextData)\r\n\r\nexport function CountDownProvider({children}: CountDownContextProps) {\r\n\r\n    let countdownTimeout: NodeJS.Timeout;\r\n\r\n    const { functions } = useContext(ChallengesContext);\r\n    const { startNewChallenge } = functions;\r\n  \r\n    const [timer, setTimer] = useState(0.1 * 60);\r\n    const [isActive, setIsActive] = useState(false);\r\n    const [hasFinished, setHasFinished] = useState(false);\r\n  \r\n    const minute = Math.floor(timer / 60);\r\n    const second = timer % 60;\r\n\r\n    function startCountdown() {\r\n        setIsActive(true);\r\n      }\r\n    \r\n      function resetCountdown() {\r\n        clearTimeout(countdownTimeout);\r\n        setIsActive(false);\r\n        setHasFinished(false);\r\n        setTimer(0.1 * 60);\r\n      }\r\n    \r\n      useEffect(() => {\r\n        if (isActive && timer > 0) {\r\n          countdownTimeout = setTimeout(() => {\r\n            setTimer(timer - 1);\r\n          }, 1000);\r\n        } else if (isActive && timer === 0) {\r\n          setHasFinished(true);\r\n          setIsActive(false);\r\n          startNewChallenge();\r\n        }\r\n      }, [isActive, timer]);\r\n    \r\n\r\n\r\n    return(\r\n\r\n        <CountDownContext.Provider\r\n        value={{\r\n            minute,\r\n            second,\r\n            hasFinished,\r\n            isActive,\r\n            startCountdown,\r\n            resetCountdown,\r\n\r\n        }}>\r\n            {children}\r\n        </CountDownContext.Provider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}