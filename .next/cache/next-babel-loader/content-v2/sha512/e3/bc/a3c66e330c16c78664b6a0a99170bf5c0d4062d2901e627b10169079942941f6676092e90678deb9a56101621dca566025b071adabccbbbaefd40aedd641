{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\caio.telles\\\\NLW.Move-it\\\\src\\\\contexts\\\\ChallengesContext.tsx\",\n    _s2 = $RefreshSig$();\n\nimport { createContext, useState, useEffect, useContext } from \"react\";\nimport challenges from \"../../challenges.json\";\nexport var ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(10),\n      experience = _useState2[0],\n      setExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      completedChallenges = _useState3[0],\n      setCompletedChallenges = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1];\n\n  var experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n  useEffect(function () {\n    Notification.requestPermission();\n  }, []);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    _s();\n\n    var randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    var newChallenge = challenges[randomChallengeIndex];\n\n    var _useContext = useContext(ChallengesContext),\n        data = _useContext.data;\n\n    var activeChallenge = data.activeChallenge;\n    setActiveChallenge(newChallenge);\n    new Audio('/notification.mp3').play();\n\n    if (Notification.permission === 'granted') {\n      new Notification('Novo Desafio', {\n        body: \"Valendo \".concat(activeChallenge.amount, \" xp! \")\n      });\n    }\n  }\n\n  _s(startNewChallenge, \"0hAPxt73XWcCCQAWfZjlyZ/wuPM=\");\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function challengComplet() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    var amount = activeChallenge.amount;\n    var finalExperience = experience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setExperience(finalExperience);\n    setActiveChallenge(null);\n    setCompletedChallenges(completedChallenges + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      data: {\n        level: level,\n        experience: experience,\n        experienceToNextLevel: experienceToNextLevel,\n        completedChallenges: completedChallenges,\n        activeChallenge: activeChallenge\n      },\n      functions: {\n        levelUp: levelUp,\n        startNewChallenge: startNewChallenge,\n        resetChallenge: resetChallenge,\n        challengComplet: challengComplet\n      }\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ChallengesProvider, \"0LH5CITHy+AWY06ZxBe5CeRew/U=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["C:/Users/caio.telles/NLW.Move-it/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","useEffect","useContext","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","experience","setExperience","completedChallenges","setCompletedChallenges","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","Notification","requestPermission","levelUp","startNewChallenge","randomChallengeIndex","floor","random","length","newChallenge","data","Audio","play","permission","body","amount","resetChallenge","challengComplet","finalExperience","functions"],"mappings":"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","sourcesContent":["import { createContext, useState, ReactNode, useEffect, useContext } from \"react\";\r\n\r\nimport challenges from \"../../challenges.json\";\r\n\r\ninterface ChallengesProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\ninterface ChallengesContextData {\r\n  data: {\r\n    level: number;\r\n    experience: number;\r\n    experienceToNextLevel: number;\r\n    completedChallenges: number;\r\n    activeChallenge: {\r\n      type: \"body\" | \"eye\";\r\n      description: string;\r\n      amount: number;\r\n    };\r\n  };\r\n  functions: {\r\n    levelUp: () => void;\r\n    startNewChallenge: () => void;\r\n    resetChallenge: () => void;\r\n    challengComplet: () => void;\r\n  };\r\n}\r\n\r\nexport const ChallengesContext = createContext({} as ChallengesContextData);\r\n\r\nexport function ChallengesProvider({ children }: ChallengesProviderProps) {\r\n  const [level, setLevel] = useState(1);\r\n  const [experience, setExperience] = useState(10);\r\n  const [completedChallenges, setCompletedChallenges] = useState(0);\r\n  const [activeChallenge, setActiveChallenge] = useState(null);\r\n\r\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\r\n\r\n  useEffect (() => {\r\n    Notification.requestPermission();\r\n  }, []) \r\n\r\n  function levelUp() {\r\n    setLevel(level + 1);\r\n  }\r\n\r\n  function startNewChallenge() {\r\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\r\n    const newChallenge = challenges[randomChallengeIndex];\r\n    const { data } = useContext(ChallengesContext);\r\n    const { activeChallenge } = data;\r\n    \r\n    setActiveChallenge(newChallenge);\r\n\r\n    new Audio ('/notification.mp3').play()\r\n\r\n    if (Notification.permission === 'granted'){\r\n      new Notification ('Novo Desafio' , {\r\n      body: `Valendo ${activeChallenge.amount} xp! `\r\n      })\r\n    }\r\n  }\r\n\r\n  function resetChallenge() {\r\n    setActiveChallenge(null);\r\n  }\r\n\r\n  function challengComplet(){\r\n      if (!activeChallenge){\r\n        return;\r\n      }\r\n\r\n      const {amount} = activeChallenge\r\n\r\n      let finalExperience = experience + amount ;\r\n\r\n      if (finalExperience >= experienceToNextLevel){\r\n          finalExperience = finalExperience - experienceToNextLevel ;\r\n          levelUp();\r\n      } \r\n\r\n      setExperience(finalExperience);\r\n      setActiveChallenge(null);\r\n      setCompletedChallenges(completedChallenges + 1);\r\n  }\r\n\r\n  return (\r\n    <ChallengesContext.Provider\r\n      value={{\r\n        data: {\r\n          level,\r\n          experience,\r\n          experienceToNextLevel,\r\n          completedChallenges,\r\n          activeChallenge,\r\n        },\r\n        functions: {\r\n          levelUp,\r\n          startNewChallenge,\r\n          resetChallenge,\r\n          challengComplet,\r\n        },\r\n      }}\r\n    >\r\n      {children}\r\n    </ChallengesContext.Provider>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}