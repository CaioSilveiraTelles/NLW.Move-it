{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createContext, useState } from \"react\";\nimport challenges from \"../../challenges.json\";\nexport var ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(10),\n      experience = _useState2[0],\n      setExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      completedChallenges = _useState3[0],\n      setCompletedChallenges = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1];\n\n  var experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    var randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    var newChallenge = challenges[randomChallengeIndex];\n    setActiveChallenge(newChallenge);\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  return /*#__PURE__*/_jsx(ChallengesContext.Provider, {\n    value: {\n      data: {\n        level: level,\n        experience: experience,\n        experienceToNextLevel: experienceToNextLevel,\n        completedChallenges: completedChallenges,\n        activeChallenge: activeChallenge\n      },\n      functions: {\n        levelUp: levelUp,\n        startNewChallenge: startNewChallenge,\n        resetChallenge: resetChallenge\n      }\n    },\n    children: children\n  });\n}","map":null,"metadata":{},"sourceType":"module"}