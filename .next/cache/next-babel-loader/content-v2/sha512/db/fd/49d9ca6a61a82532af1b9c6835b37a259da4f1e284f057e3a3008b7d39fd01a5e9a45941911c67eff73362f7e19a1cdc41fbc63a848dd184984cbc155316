{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\caio.telles\\\\move-it\\\\src\\\\contexts\\\\ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from \"react\";\nimport challenges from \"../../challenges.json\";\nexport var ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(10),\n      experience = _useState2[0],\n      setExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      completedChallenges = _useState3[0],\n      setCompletedChallenges = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1];\n\n  var experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    var randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    var newChallenge = challenges[randomChallengeIndex];\n    setActiveChallenge(newChallenge);\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      data: {\n        level: level,\n        experience: experience,\n        experienceToNextLevel: experienceToNextLevel,\n        completedChallenges: completedChallenges,\n        activeChallenge: activeChallenge\n      },\n      functions: {\n        levelUp: levelUp,\n        startNewChallenge: startNewChallenge,\n        resetChallenge: resetChallenge\n      }\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChallengesProvider, \"emXMm+Gs/wcrtPH1a+pdJoEomqc=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["C:/Users/caio.telles/move-it/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","experience","setExperience","completedChallenges","setCompletedChallenges","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","levelUp","startNewChallenge","randomChallengeIndex","floor","random","length","newChallenge","resetChallenge","data","functions"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAmD,OAAnD;AAEA,OAAOC,UAAP,MAAuB,uBAAvB;AAyBA,OAAO,IAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASI,kBAAT,OAAmE;AAAA;;AAAA,MAArCC,QAAqC,QAArCA,QAAqC;;AAAA,kBAC9CJ,QAAQ,CAAC,CAAD,CADsC;AAAA,MACjEK,KADiE;AAAA,MAC1DC,QAD0D;;AAAA,mBAEpCN,QAAQ,CAAC,EAAD,CAF4B;AAAA,MAEjEO,UAFiE;AAAA,MAErDC,aAFqD;;AAAA,mBAGlBR,QAAQ,CAAC,CAAD,CAHU;AAAA,MAGjES,mBAHiE;AAAA,MAG5CC,sBAH4C;;AAAA,mBAI1BV,QAAQ,CAAC,IAAD,CAJkB;AAAA,MAIjEW,eAJiE;AAAA,MAIhDC,kBAJgD;;AAMxE,MAAMC,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAG,CAAT,IAAc,CAAvB,EAA0B,CAA1B,CAA9B;;AAEA,WAASW,OAAT,GAAmB;AACjBV,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;;AAED,WAASY,iBAAT,GAA6B;AAC3B,QAAMC,oBAAoB,GAAGJ,IAAI,CAACK,KAAL,CAAWL,IAAI,CAACM,MAAL,KAAgBnB,UAAU,CAACoB,MAAtC,CAA7B;AACA,QAAMC,YAAY,GAAGrB,UAAU,CAACiB,oBAAD,CAA/B;AACAN,IAAAA,kBAAkB,CAACU,YAAD,CAAlB;AACD;;AAED,WAASC,cAAT,GAA0B;AACxBX,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD;;AAED,sBACE,QAAC,iBAAD,CAAmB,QAAnB;AACE,IAAA,KAAK,EAAE;AACLY,MAAAA,IAAI,EAAE;AACJnB,QAAAA,KAAK,EAALA,KADI;AAEJE,QAAAA,UAAU,EAAVA,UAFI;AAGJM,QAAAA,qBAAqB,EAArBA,qBAHI;AAIJJ,QAAAA,mBAAmB,EAAnBA,mBAJI;AAKJE,QAAAA,eAAe,EAAfA;AALI,OADD;AAQLc,MAAAA,SAAS,EAAE;AACTT,QAAAA,OAAO,EAAPA,OADS;AAETC,QAAAA,iBAAiB,EAAjBA,iBAFS;AAGTM,QAAAA,cAAc,EAAdA;AAHS;AARN,KADT;AAAA,cAgBGnB;AAhBH;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD;;GA1CeD,kB;;KAAAA,kB","sourcesContent":["import { createContext, useState, ReactNode } from \"react\";\r\n\r\nimport challenges from \"../../challenges.json\";\r\n\r\ninterface ChallengesProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\ninterface ChallengesContextData {\r\n  data: {\r\n    level: number;\r\n    experience: number;\r\n    experienceToNextLevel: number;\r\n    completedChallenges: number;\r\n    activeChallenge: {\r\n      type: \"body\" | \"eye\";\r\n      description: string;\r\n      amount: number;\r\n    };\r\n  };\r\n  functions: {\r\n    levelUp: () => void;\r\n    startNewChallenge: () => void;\r\n    resetChallenge: () => void;\r\n  };\r\n}\r\n\r\nexport const ChallengesContext = createContext({} as ChallengesContextData);\r\n\r\nexport function ChallengesProvider({ children }: ChallengesProviderProps) {\r\n  const [level, setLevel] = useState(1);\r\n  const [experience, setExperience] = useState(10);\r\n  const [completedChallenges, setCompletedChallenges] = useState(0);\r\n  const [activeChallenge, setActiveChallenge] = useState(null);\r\n\r\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\r\n\r\n  function levelUp() {\r\n    setLevel(level + 1);\r\n  }\r\n\r\n  function startNewChallenge() {\r\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\r\n    const newChallenge = challenges[randomChallengeIndex];\r\n    setActiveChallenge(newChallenge);\r\n  }\r\n\r\n  function resetChallenge() {\r\n    setActiveChallenge(null);\r\n  }\r\n\r\n  return (\r\n    <ChallengesContext.Provider\r\n      value={{\r\n        data: {\r\n          level,\r\n          experience,\r\n          experienceToNextLevel,\r\n          completedChallenges,\r\n          activeChallenge,\r\n        },\r\n        functions: {\r\n          levelUp,\r\n          startNewChallenge,\r\n          resetChallenge,\r\n        },\r\n      }}\r\n    >\r\n      {children}\r\n    </ChallengesContext.Provider>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}